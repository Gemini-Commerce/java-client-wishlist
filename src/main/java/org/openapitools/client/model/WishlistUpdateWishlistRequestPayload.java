/*
 * Wishlist Service
 * API for managing wishlists
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WishlistLocalizedText;
import org.openapitools.client.model.WishlistPrivacy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Wishlist.JSON;

/**
 * WishlistUpdateWishlistRequestPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T10:50:13.759631386Z[Etc/UTC]")
public class WishlistUpdateWishlistRequestPayload {
  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private WishlistPrivacy privacy = WishlistPrivacy.UNKNOWN;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private WishlistLocalizedText label;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private WishlistLocalizedText description;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public WishlistUpdateWishlistRequestPayload() {
  }

  public WishlistUpdateWishlistRequestPayload privacy(WishlistPrivacy privacy) {
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nullable
  public WishlistPrivacy getPrivacy() {
    return privacy;
  }

  public void setPrivacy(WishlistPrivacy privacy) {
    this.privacy = privacy;
  }


  public WishlistUpdateWishlistRequestPayload label(WishlistLocalizedText label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public WishlistLocalizedText getLabel() {
    return label;
  }

  public void setLabel(WishlistLocalizedText label) {
    this.label = label;
  }


  public WishlistUpdateWishlistRequestPayload description(WishlistLocalizedText description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public WishlistLocalizedText getDescription() {
    return description;
  }

  public void setDescription(WishlistLocalizedText description) {
    this.description = description;
  }


  public WishlistUpdateWishlistRequestPayload isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

   /**
   * Get isDefault
   * @return isDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WishlistUpdateWishlistRequestPayload wishlistUpdateWishlistRequestPayload = (WishlistUpdateWishlistRequestPayload) o;
    return Objects.equals(this.privacy, wishlistUpdateWishlistRequestPayload.privacy) &&
        Objects.equals(this.label, wishlistUpdateWishlistRequestPayload.label) &&
        Objects.equals(this.description, wishlistUpdateWishlistRequestPayload.description) &&
        Objects.equals(this.isDefault, wishlistUpdateWishlistRequestPayload.isDefault);
  }

  @Override
  public int hashCode() {
    return Objects.hash(privacy, label, description, isDefault);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WishlistUpdateWishlistRequestPayload {\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("privacy");
    openapiFields.add("label");
    openapiFields.add("description");
    openapiFields.add("isDefault");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WishlistUpdateWishlistRequestPayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WishlistUpdateWishlistRequestPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WishlistUpdateWishlistRequestPayload is not found in the empty JSON string", WishlistUpdateWishlistRequestPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WishlistUpdateWishlistRequestPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WishlistUpdateWishlistRequestPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        WishlistPrivacy.validateJsonElement(jsonObj.get("privacy"));
      }
      // validate the optional field `label`
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) {
        WishlistLocalizedText.validateJsonElement(jsonObj.get("label"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        WishlistLocalizedText.validateJsonElement(jsonObj.get("description"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WishlistUpdateWishlistRequestPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WishlistUpdateWishlistRequestPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WishlistUpdateWishlistRequestPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WishlistUpdateWishlistRequestPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<WishlistUpdateWishlistRequestPayload>() {
           @Override
           public void write(JsonWriter out, WishlistUpdateWishlistRequestPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WishlistUpdateWishlistRequestPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WishlistUpdateWishlistRequestPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WishlistUpdateWishlistRequestPayload
  * @throws IOException if the JSON string is invalid with respect to WishlistUpdateWishlistRequestPayload
  */
  public static WishlistUpdateWishlistRequestPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WishlistUpdateWishlistRequestPayload.class);
  }

 /**
  * Convert an instance of WishlistUpdateWishlistRequestPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

