/*
 * Wishlist Service
 * API for managing wishlists
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.WishlistLocalizedText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Wishlist.JSON;

/**
 * WishlistWishlistItemResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T10:50:13.759631386Z[Etc/UTC]")
public class WishlistWishlistItemResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GRN = "grn";
  @SerializedName(SERIALIZED_NAME_GRN)
  private String grn;

  public static final String SERIALIZED_NAME_WISHLIST_ID = "wishlistId";
  @SerializedName(SERIALIZED_NAME_WISHLIST_ID)
  private String wishlistId;

  public static final String SERIALIZED_NAME_ITEM_GRN = "itemGrn";
  @SerializedName(SERIALIZED_NAME_ITEM_GRN)
  private String itemGrn;

  public static final String SERIALIZED_NAME_PREFERRED_QUANTITY = "preferredQuantity";
  @SerializedName(SERIALIZED_NAME_PREFERRED_QUANTITY)
  private String preferredQuantity;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private WishlistLocalizedText description;

  public static final String SERIALIZED_NAME_ADDED_BY_CUSTOMER_GRN = "addedByCustomerGrn";
  @SerializedName(SERIALIZED_NAME_ADDED_BY_CUSTOMER_GRN)
  private String addedByCustomerGrn;

  public static final String SERIALIZED_NAME_ADDED_AT = "addedAt";
  @SerializedName(SERIALIZED_NAME_ADDED_AT)
  private OffsetDateTime addedAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public WishlistWishlistItemResponse() {
  }

  public WishlistWishlistItemResponse id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public WishlistWishlistItemResponse grn(String grn) {
    this.grn = grn;
    return this;
  }

   /**
   * Get grn
   * @return grn
  **/
  @javax.annotation.Nullable
  public String getGrn() {
    return grn;
  }

  public void setGrn(String grn) {
    this.grn = grn;
  }


  public WishlistWishlistItemResponse wishlistId(String wishlistId) {
    this.wishlistId = wishlistId;
    return this;
  }

   /**
   * Get wishlistId
   * @return wishlistId
  **/
  @javax.annotation.Nullable
  public String getWishlistId() {
    return wishlistId;
  }

  public void setWishlistId(String wishlistId) {
    this.wishlistId = wishlistId;
  }


  public WishlistWishlistItemResponse itemGrn(String itemGrn) {
    this.itemGrn = itemGrn;
    return this;
  }

   /**
   * Get itemGrn
   * @return itemGrn
  **/
  @javax.annotation.Nullable
  public String getItemGrn() {
    return itemGrn;
  }

  public void setItemGrn(String itemGrn) {
    this.itemGrn = itemGrn;
  }


  public WishlistWishlistItemResponse preferredQuantity(String preferredQuantity) {
    this.preferredQuantity = preferredQuantity;
    return this;
  }

   /**
   * Get preferredQuantity
   * @return preferredQuantity
  **/
  @javax.annotation.Nullable
  public String getPreferredQuantity() {
    return preferredQuantity;
  }

  public void setPreferredQuantity(String preferredQuantity) {
    this.preferredQuantity = preferredQuantity;
  }


  public WishlistWishlistItemResponse description(WishlistLocalizedText description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public WishlistLocalizedText getDescription() {
    return description;
  }

  public void setDescription(WishlistLocalizedText description) {
    this.description = description;
  }


  public WishlistWishlistItemResponse addedByCustomerGrn(String addedByCustomerGrn) {
    this.addedByCustomerGrn = addedByCustomerGrn;
    return this;
  }

   /**
   * Get addedByCustomerGrn
   * @return addedByCustomerGrn
  **/
  @javax.annotation.Nullable
  public String getAddedByCustomerGrn() {
    return addedByCustomerGrn;
  }

  public void setAddedByCustomerGrn(String addedByCustomerGrn) {
    this.addedByCustomerGrn = addedByCustomerGrn;
  }


  public WishlistWishlistItemResponse addedAt(OffsetDateTime addedAt) {
    this.addedAt = addedAt;
    return this;
  }

   /**
   * Get addedAt
   * @return addedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAddedAt() {
    return addedAt;
  }

  public void setAddedAt(OffsetDateTime addedAt) {
    this.addedAt = addedAt;
  }


  public WishlistWishlistItemResponse updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WishlistWishlistItemResponse wishlistWishlistItemResponse = (WishlistWishlistItemResponse) o;
    return Objects.equals(this.id, wishlistWishlistItemResponse.id) &&
        Objects.equals(this.grn, wishlistWishlistItemResponse.grn) &&
        Objects.equals(this.wishlistId, wishlistWishlistItemResponse.wishlistId) &&
        Objects.equals(this.itemGrn, wishlistWishlistItemResponse.itemGrn) &&
        Objects.equals(this.preferredQuantity, wishlistWishlistItemResponse.preferredQuantity) &&
        Objects.equals(this.description, wishlistWishlistItemResponse.description) &&
        Objects.equals(this.addedByCustomerGrn, wishlistWishlistItemResponse.addedByCustomerGrn) &&
        Objects.equals(this.addedAt, wishlistWishlistItemResponse.addedAt) &&
        Objects.equals(this.updatedAt, wishlistWishlistItemResponse.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, grn, wishlistId, itemGrn, preferredQuantity, description, addedByCustomerGrn, addedAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WishlistWishlistItemResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    grn: ").append(toIndentedString(grn)).append("\n");
    sb.append("    wishlistId: ").append(toIndentedString(wishlistId)).append("\n");
    sb.append("    itemGrn: ").append(toIndentedString(itemGrn)).append("\n");
    sb.append("    preferredQuantity: ").append(toIndentedString(preferredQuantity)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addedByCustomerGrn: ").append(toIndentedString(addedByCustomerGrn)).append("\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("grn");
    openapiFields.add("wishlistId");
    openapiFields.add("itemGrn");
    openapiFields.add("preferredQuantity");
    openapiFields.add("description");
    openapiFields.add("addedByCustomerGrn");
    openapiFields.add("addedAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WishlistWishlistItemResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WishlistWishlistItemResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WishlistWishlistItemResponse is not found in the empty JSON string", WishlistWishlistItemResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WishlistWishlistItemResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WishlistWishlistItemResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("grn") != null && !jsonObj.get("grn").isJsonNull()) && !jsonObj.get("grn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grn").toString()));
      }
      if ((jsonObj.get("wishlistId") != null && !jsonObj.get("wishlistId").isJsonNull()) && !jsonObj.get("wishlistId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wishlistId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wishlistId").toString()));
      }
      if ((jsonObj.get("itemGrn") != null && !jsonObj.get("itemGrn").isJsonNull()) && !jsonObj.get("itemGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemGrn").toString()));
      }
      if ((jsonObj.get("preferredQuantity") != null && !jsonObj.get("preferredQuantity").isJsonNull()) && !jsonObj.get("preferredQuantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredQuantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredQuantity").toString()));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        WishlistLocalizedText.validateJsonElement(jsonObj.get("description"));
      }
      if ((jsonObj.get("addedByCustomerGrn") != null && !jsonObj.get("addedByCustomerGrn").isJsonNull()) && !jsonObj.get("addedByCustomerGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addedByCustomerGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addedByCustomerGrn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WishlistWishlistItemResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WishlistWishlistItemResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WishlistWishlistItemResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WishlistWishlistItemResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WishlistWishlistItemResponse>() {
           @Override
           public void write(JsonWriter out, WishlistWishlistItemResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WishlistWishlistItemResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WishlistWishlistItemResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WishlistWishlistItemResponse
  * @throws IOException if the JSON string is invalid with respect to WishlistWishlistItemResponse
  */
  public static WishlistWishlistItemResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WishlistWishlistItemResponse.class);
  }

 /**
  * Convert an instance of WishlistWishlistItemResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

